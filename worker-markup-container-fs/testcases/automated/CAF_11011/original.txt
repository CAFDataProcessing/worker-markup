From: Reid, Andy
Sent: Mon May 23 09:24:38 2016
To: Haroules, Tony; Hardy, Dermot; Jalbert, Christopher; Kalashian, Darin; Chakraborty, Shubhendu; Knobloch, Tom; Pandit, Dwijen; Puccianti, Sylvain B; Carter, Sam; Bryson, Michael; Jain, Rahul (Rahul Jain); Ploch, Krzysztof
Cc: McKenzie, Jim (HPSW); Kokts, Gundars; Wojnowski, Steve; Hill, Alex; Mazumdar, Shashi; Correa, Victor
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
Importance: Normal

I agree with Dermot, once we open source a component it should be treated like any other third party component and use the most appropriate publically accessible tools. What are the requirements for auditable code review for third party open source components? 
 
BTW
I think when Dermot says IDM are using keycloak on github.com he means the opensource project https://github.com/keycloak/keycloak. All I knew of in TF was the modified docker container.
 
 
From: Haroules, Tony 
Sent: 20 May 2016 20:35
To: Hardy, Dermot <dermot.hardy@hpe.com>; Jalbert, Christopher <christopher.jalbert@hpe.com>; Kalashian, Darin <darin.kalashian@hpe.com>; Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
 
I agree with Dermot: integration with Jira should not be an concern based on previous experience with other open source projects on the internet today. (Jenkins own project for example uses, Jira and Confluence integrated nicely ).  https://jenkins.io/
 
But I think in order to answer this question, it begs answer to the underlying question about staying with Jira, or switching to GitHub’s internal tool.  I’d also like to hear what Krzystof’s plans are.
 
Lastly, IDM is using keycloak that was checked into TF git, not the one from GitHub (for clarification), unless they changed something that I was unaware of…
 
-T
 
From: Hardy, Dermot 
Sent: Friday, May 20, 2016 3:12 PM
To: Jalbert, Christopher <christopher.jalbert@hpe.com>; Haroules, Tony <tony.haroules@hpe.com>; Kalashian, Darin <darin.kalashian@hpe.com>; Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
 
Hi Chris,
 
I can’t answer all your questions but I’ll take a stab at it.
 
The public/private on GitHub Enterprise is still just within the HPE – i.e. if we set a CAF repository to private then only CAF Team Members will be able to see it whereas if it is public then anybody on the HPE network can see it (though they wouldn’t access to it, at least by default).
 
Krzystof will be doing the open-source planning so perhaps he can (or will be able to) shed more light on it but I would have thought that open-sourcing a project would mean moving it to GitHub.com.  Any projects that we move to GitHub.com would obviously be standalone, and that would be the only place that they would be pulled from – they wouldn’t be pulled from two places.  If we then use some of these components within our private repositories then it would be much the same as using any other external dependency – such as the way the IDM team use KeyCloak, which is hosted on GitHub.com.  I would assume that we would use the same code review process for our contributions as we would expect external contributors to use, as I don’t see why we would be happy for the code to be public but not the code review comments, but I could be wrong, others may have different views on that.
 
I’m not sure about the auditable code review trail, I guess that is one of the questions that Krzystof will need to answer.  Or if it’s a legal thing then maybe it only applies to a sensitive projects that we’re not open-sourcing – I don’t really know.
 
With regard to defect tracking, again this is something that will need to be planned but I know many open-source projects use public JIRA instances and others use GitHub’s internal bug reporting tool – either seem like reasonable options to me as you can cross-reference both in both directions.
 
Thanks,
Dermot
 
 
From: Jalbert, Christopher 
Sent: 20 May 2016 7:35 PM
To: Haroules, Tony <tony.haroules@hpe.com>; Hardy, Dermot <dermot.hardy@hpe.com>; Kalashian, Darin <darin.kalashian@hpe.com>; Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
 
Forgive my ignorance, but I wasn’t aware that deciding to open source pieces in the future would require us to break up our code into separate source repositories. I thought Github Enterprise allowed you to set individual repos as either public/private and set appropriate access controls. Could someone please explain how this would work if we go down this path? 
 
If we have to pull from more than one location, then an additional tool outside of Github that can handle multiple repos would be better It can pull everything together into code reviews that logically make sense and like Tony . Depending on what certifications we may be thinking about in the future, having an auditable code review trail may be a requirement and I’m not sure what options would be available if we had to solely rely on Github.com to produce pieces of this information.  Public Github would also mean potentially splitting up defect tracking, work/tasks, etc. and could limit how we integrate so it has other implications. 
 
I would really like to see us figure out #1. Having tasks integrated check-ins integrated with code review integrated with test cases and (hopefully not too frequently) integrated with defects is very useful.
 
#2 will become important as soon as we seek a certification that requires auditable code review trails. 
 
 
Christopher P. Jalbert  |  Manager, Software Engineering  |  Apps RnD, Hewlett Packard Enterprise  | 000.000.0000 (t)  |  000.000.0000 (m)  |  christopher.jalbert@hpe.com
 
 
From: Haroules, Tony 
Sent: Friday, May 20, 2016 2:23 PM
To: Hardy, Dermot <dermot.hardy@hpe.com>; Kalashian, Darin <darin.kalashian@hpe.com>; Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Jalbert, Christopher <christopher.jalbert@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
 
Dermot:
I wasn’t in the call either.  And yes, you are confirming my point exactly:  
 
Code review will have two different paths, if we do what you are suggesting, not a single instance like it could be with one of the other tools.  Additionally you are at the mercy of “public” GitHub (not the HPE instance) for any storage (or loss thereof) of past reviews.
 
The goal of all of these tool and infrastructure changes was “single” implementation (or at least that has been the driving justification I have heard).  My standpoint is that we are immediately in violation of that by switching to process or tools that by default is contrary to that charter ( in this case we are knowingly forcing reviews in two separate locations)…
 
There is a reason, that tools like Code Collaborator and Crucible are paid, the features are typically far more mature and reliable (I know everyone knows this, but I’m restating for emphasis of consideration).  I’d hate to see us not truly do a spreadsheet comparison of those features , and possibly risk productivity, because the latest trend is smashing everything into GitHub.
 
 
All:
My other question stands, is items 1 and 2 make or break ?
 
Thanks,
-T
From: Hardy, Dermot 
Sent: Friday, May 20, 2016 2:09 PM
To: Haroules, Tony <tony.haroules@hpe.com>; Kalashian, Darin <darin.kalashian@hpe.com>; Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Jalbert, Christopher <christopher.jalbert@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
 
Hi Tony,
 
I wasn’t in yesterday’s meeting but I would have thought the fact that we have to open source some of our components (we have to start to plan open-sourcing worker framework next week) almost forces us down the GitHub route.  We would obviously move the components we are open-souring from GitHub Enterprise to GitHub.com, but we would have to expect external contributors to submit code for consideration using the standard mechanism used with all other GitHub.com projects.
 
Thanks,
Dermot
 
 
From: Haroules, Tony 
Sent: 20 May 2016 3:19 PM
To: Kalashian, Darin <darin.kalashian@hpe.com>; Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Jalbert, Christopher <christopher.jalbert@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Hardy, Dermot <dermot.hardy@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: RE: CAF Quality Working Group : Code Review Tool Follow-up Notes
 
Presumably you have also thought about what happens when some amount of the source code is open sourced, and you now have to use multiple locations to access your source control tools (code review and other ?)
Gerrit, Code Collaborator, and Crucible are nice because they allow you to support any repository type in one instance, one location…  And you can now query across repositories, report across repositories etc.  Currently not an option with separate instances of Git Hub.
Is items 1 and 2 (in the action items), make or break concerns, or just nice to have ?
-T
_____________________________________________
From: Kalashian, Darin
Sent: Friday, May 20, 2016 10:05 AM
To: Chakraborty, Shubhendu <shubhendu.chakraborty@hpe.com>; Knobloch, Tom <tom.knobloch@hpe.com>; Pandit, Dwijen <dwijen.pandit@hpe.com>; Puccianti, Sylvain B <sylvain.puccianti@hpe.com>; Carter, Sam <sam.carter@hpe.com>; Jalbert, Christopher <christopher.jalbert@hpe.com>; Reid, Andy <andrew.reid@hpe.com>; Bryson, Michael <michael.bryson@hpe.com>; Jain, Rahul (Rahul Jain) <rahul.jain2@hpe.com>; Ploch, Krzysztof <krzysztof.ploch@hpe.com>
Cc: McKenzie, Jim (HPSW) <james.mckenzie@hpe.com>; Kokts, Gundars <gundars.kokts@hpe.com>; Wojnowski, Steve <steve.wojnowski@hpe.com>; Hill, Alex <alex.hill@hpe.com>; Mazumdar, Shashi <shashi.mazumdar@hpe.com>; Hardy, Dermot <dermot.hardy@hpe.com>; Haroules, Tony <tony.haroules@hpe.com>; Correa, Victor <victor.correa@hpe.com>
Subject: CAF Quality Working Group : Code Review Tool Follow-up Notes
Greetings All,
Yesterday, a smaller group got together and discussed the possible tools that could be used for Code Reviews.
We discussed:
·       GitHub Pull Requests
·       Crucible
·       Gerrit
·       Code Collaborator
We saw demos of most of the tools and their capabilities. 
This sub team would like to propose using the integrated GitHub Pull Requests to address code reviews.
Two concerns/actions were raised:
1.      Need to complete JIRA integration so that the code review can be linked seamlessly to JIRA work/bug tickets.
2.      Need to investigate Metrics/audit trail collection data to ensure that code review evidential persist and can be queried.
Let’s circle back in the next workgroup meeting to follow up.
Regards,
Darin
